// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using desafio_api.Data;

namespace desafio_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220722150520_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("desafio_api.Models.Atendimento", b =>
                {
                    b.Property<Guid>("AtendimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CachorroId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comentarios")
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("Comentarios");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataAtendimento");

                    b.Property<string>("Diagnostico")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("VARCHAR(1000)")
                        .HasColumnName("Diagnostico");

                    b.Property<Guid?>("MedicoId")
                        .HasColumnType("char(36)");

                    b.HasKey("AtendimentoId");

                    b.HasIndex("CachorroId");

                    b.HasIndex("MedicoId");

                    b.ToTable("Atendimentos");

                    b.HasData(
                        new
                        {
                            AtendimentoId = new Guid("c1bf4c30-9229-4c02-823d-01760da5c0e9"),
                            CachorroId = new Guid("c117bd9f-93dd-4de2-9934-3f3654edb323"),
                            Comentarios = "Cachorro ainda não estava 100%, mas o dono quis ir embora.",
                            Data = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Diagnostico = "O cachorro veio com sintomas de desidratação. Recebeu soro e foi liberado.",
                            MedicoId = new Guid("da3da908-60c3-4eb2-b989-1408ae36e550")
                        });
                });

            modelBuilder.Entity("desafio_api.Models.Cachorro", b =>
                {
                    b.Property<Guid>("CachorroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.Property<string>("Raca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("Raca");

                    b.HasKey("CachorroId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Cachorros");

                    b.HasData(
                        new
                        {
                            CachorroId = new Guid("c117bd9f-93dd-4de2-9934-3f3654edb323"),
                            ClienteId = new Guid("01706624-b589-4a76-8333-0467eea7d615"),
                            Nome = "Paçoca",
                            Raca = "Pinscher"
                        },
                        new
                        {
                            CachorroId = new Guid("de502ccc-c594-4bd4-a1dc-7b17251d923a"),
                            ClienteId = new Guid("01706624-b589-4a76-8333-0467eea7d615"),
                            Nome = "Ximbica",
                            Raca = "Pinscher"
                        },
                        new
                        {
                            CachorroId = new Guid("c4ef00d0-d3ba-42f8-b61a-6fd6c7bb7491"),
                            ClienteId = new Guid("b45b4428-de85-4836-8eda-951598019322"),
                            Nome = "Joe",
                            Raca = "Bulldog"
                        });
                });

            modelBuilder.Entity("desafio_api.Models.Cliente", b =>
                {
                    b.Property<Guid>("ClienteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("VARCHAR(11)")
                        .HasColumnName("CPF");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.HasKey("ClienteId");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ClienteId = new Guid("01706624-b589-4a76-8333-0467eea7d615"),
                            CPF = "123456789",
                            Nome = "Robson Caetano"
                        },
                        new
                        {
                            ClienteId = new Guid("b45b4428-de85-4836-8eda-951598019322"),
                            CPF = "789456123",
                            Nome = "Judiscréia dos Santos"
                        });
                });

            modelBuilder.Entity("desafio_api.Models.DadosCachorro", b =>
                {
                    b.Property<Guid>("DadosCachorroId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("Altura")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("Altura");

                    b.Property<Guid?>("CachorroId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Raca");

                    b.Property<double>("Largura")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("Largura");

                    b.Property<double>("Peso")
                        .HasColumnType("DOUBLE")
                        .HasColumnName("Peso");

                    b.HasKey("DadosCachorroId");

                    b.HasIndex("CachorroId");

                    b.ToTable("DadosCachorros");

                    b.HasData(
                        new
                        {
                            DadosCachorroId = new Guid("6945ad52-c3f9-48cd-9391-44c3df1296f7"),
                            Altura = 35.0,
                            CachorroId = new Guid("c117bd9f-93dd-4de2-9934-3f3654edb323"),
                            Data = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Largura = 22.0,
                            Peso = 11.199999999999999
                        },
                        new
                        {
                            DadosCachorroId = new Guid("81f51bf9-98f7-4f3f-b67b-187149a9f7b2"),
                            Altura = 35.0,
                            CachorroId = new Guid("de502ccc-c594-4bd4-a1dc-7b17251d923a"),
                            Data = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Largura = 22.0,
                            Peso = 11.199999999999999
                        },
                        new
                        {
                            DadosCachorroId = new Guid("4d032329-09c6-4f10-b6ff-8422e5eadca1"),
                            Altura = 35.0,
                            CachorroId = new Guid("c4ef00d0-d3ba-42f8-b61a-6fd6c7bb7491"),
                            Data = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Largura = 22.0,
                            Peso = 11.199999999999999
                        });
                });

            modelBuilder.Entity("desafio_api.Models.Medico", b =>
                {
                    b.Property<Guid>("MedicoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CRMV")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("CRMV");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)")
                        .HasColumnName("Nome");

                    b.HasKey("MedicoId");

                    b.ToTable("Medicos");

                    b.HasData(
                        new
                        {
                            MedicoId = new Guid("da3da908-60c3-4eb2-b989-1408ae36e550"),
                            CRMV = "11254/SP",
                            Nome = "Reinaldo Azevedo"
                        });
                });

            modelBuilder.Entity("desafio_api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("VARCHAR(160)")
                        .HasColumnName("Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("VARCHAR(80)")
                        .HasColumnName("Nome");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a67c17d-7733-41f5-a148-117a37c97d24"),
                            Email = "admin@gft.com",
                            Nome = "admin",
                            PasswordHash = "10000.d+P57Vh62pCTJhn4Cku32A==.tVCR7/JEGqsbf8hQmRJZPYjYmJfeFO0NP/y0tm0yFTc="
                        });
                });

            modelBuilder.Entity("desafio_api.Models.Atendimento", b =>
                {
                    b.HasOne("desafio_api.Models.Cachorro", "Cachorro")
                        .WithMany("Atendimentos")
                        .HasForeignKey("CachorroId");

                    b.HasOne("desafio_api.Models.Medico", "Medico")
                        .WithMany("Atendimentos")
                        .HasForeignKey("MedicoId");

                    b.Navigation("Cachorro");

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("desafio_api.Models.Cachorro", b =>
                {
                    b.HasOne("desafio_api.Models.Cliente", "Cliente")
                        .WithMany("Cachorros")
                        .HasForeignKey("ClienteId");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("desafio_api.Models.DadosCachorro", b =>
                {
                    b.HasOne("desafio_api.Models.Cachorro", "Cachorro")
                        .WithMany("DadosCachorro")
                        .HasForeignKey("CachorroId");

                    b.Navigation("Cachorro");
                });

            modelBuilder.Entity("desafio_api.Models.Cachorro", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("DadosCachorro");
                });

            modelBuilder.Entity("desafio_api.Models.Cliente", b =>
                {
                    b.Navigation("Cachorros");
                });

            modelBuilder.Entity("desafio_api.Models.Medico", b =>
                {
                    b.Navigation("Atendimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
